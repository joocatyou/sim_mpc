<?xml version="1.0"?>
<robot name="sam_bot" xmlns:xacro="http://ros.org/wiki/xacro">

  <!-- =============================================================
       0. 기본 파라미터
       ============================================================= -->
  <xacro:property name="base_width"  value="0.31"/>
  <xacro:property name="base_length" value="0.42"/>
  <xacro:property name="base_height" value="0.18"/>

  <xacro:property name="wheel_radius" value="0.10"/>
  <xacro:property name="wheel_width"  value="0.04"/>
  <xacro:property name="wheel_ygap"   value="0.025"/>
  <xacro:property name="wheel_zoff"   value="0.05"/>
  <xacro:property name="wheel_xoff"   value="0.0"/>

  <xacro:property name="caster_xoff"  value="0.14"/>

  <!-- =============================================================
       1. 관성 매크로
       ============================================================= -->
  <xacro:macro name="box_inertia" params="m w h d">
    <inertial>
      <origin xyz="0 0 0" rpy="${pi/2} 0 ${pi/2}"/>
      <mass value="${m}"/>
      <inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0"
               iyy="${(m/12) * (w*w + d*d)}" iyz="0.0"
               izz="${(m/12) * (w*w + h*h)}"/>
    </inertial>
  </xacro:macro>

  <xacro:macro name="cylinder_inertia" params="m r h">
    <inertial>
      <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
      <mass value="${m}"/>
      <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy="0" ixz="0"
               iyy="${(m/12) * (3*r*r + h*h)}" iyz="0"
               izz="${(m/2) * (r*r)}"/>
    </inertial>
  </xacro:macro>

  <xacro:macro name="sphere_inertia" params="m r">
    <inertial>
      <mass value="${m}"/>
      <inertia ixx="${(2/5) * m * (r*r)}" ixy="0.0" ixz="0.0"
               iyy="${(2/5) * m * (r*r)}" iyz="0.0"
               izz="${(2/5) * m * (r*r)}"/>
    </inertial>
  </xacro:macro>

  <!-- =============================================================
       2. 링크 / 조인트
       ============================================================= -->
  
  <link name="base_link">
    <visual>
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}"/>
      </geometry>
      <material name="Cyan">
        <color rgba="0 1.0 1.0 1.0"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}"/>
      </geometry>
    </collision>
    <xacro:box_inertia m="15" w="${base_width}" d="${base_length}" h="${base_height}"/>
  </link>

  <link name="base_footprint"/>

  <joint name="base_joint" type="fixed">
    <parent link="base_footprint"/>
    <child link="base_link"/>
    <origin xyz="0.0 0.0 ${(wheel_radius + wheel_zoff)}" rpy="0 0 0"/>
  </joint>


  <xacro:macro name="wheel" params="prefix x_reflect y_reflect">
    <link name="${prefix}_link">
      <visual>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
        <material name="Gray">
          <color rgba="0.5 0.5 0.5 1.0"/>
        </material>
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
      </collision>
      <xacro:cylinder_inertia m="0.5" r="${wheel_radius}" h="${wheel_width}"/>
    </link>

    <joint name="${prefix}_joint" type="continuous">
      <parent link="base_link"/>
      <child link="${prefix}_link"/>
      <origin xyz="${x_reflect * wheel_xoff} ${y_reflect * (base_width/2 + wheel_ygap)} ${-wheel_zoff}" rpy="0 0 0"/>
      <axis xyz="0 1 0"/>
    </joint>

    <!-- Gazebo 물리 속성 -->
    <gazebo reference="${prefix}_joint">
      <implicitSpringDamper>1</implicitSpringDamper>
    </gazebo>

    <gazebo reference="${prefix}_link">
      <mu1>1.0</mu1>
      <mu2>1.0</mu2>
      <kp>1000000.0</kp>
      <kd>100.0</kd>
      <material>Gazebo/Grey</material>
    </gazebo>
  </xacro:macro>

  <!-- 좌, 우 구동 휠 인스턴스 -->
  <xacro:wheel prefix="drivewhl_l" x_reflect="1" y_reflect="1"/>
  <xacro:wheel prefix="drivewhl_r" x_reflect="1" y_reflect="-1"/>


  <xacro:macro name="caster" params="prefix x_offset">
    <link name="${prefix}_caster">
      <visual>
        <geometry>
          <sphere radius="${wheel_radius + wheel_zoff - (base_height/2)}"/>
        </geometry>
        <material name="Cyan">
          <color rgba="0 1.0 1.0 1.0"/>
        </material>
      </visual>
      <collision>
        <geometry>
          <sphere radius="${wheel_radius + wheel_zoff - (base_height/2)}"/>
        </geometry>
      </collision>
      <xacro:sphere_inertia m="0.5" r="${wheel_radius + wheel_zoff - (base_height/2)}"/>
    </link>

    <joint name="${prefix}_caster_joint" type="fixed">
      <parent link="base_link"/>
      <child link="${prefix}_caster"/>
      <origin xyz="${x_offset} 0.0 ${-(base_height/2)}" rpy="0 0 0"/>
    </joint>
  </xacro:macro>

  <xacro:caster prefix="front" x_offset="${caster_xoff}"/>
  <xacro:caster prefix="rear"  x_offset="-${caster_xoff}"/>


  <!-- 레이저 -->
  <link name="laser">
    <visual>
      <geometry>
        <cylinder radius="0.05" length="0.04"/>
      </geometry>
      <material name="Red">
        <color rgba="1.0 0.0 0.0 1.0"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <cylinder radius="0.05" length="0.04"/>
      </geometry>
    </collision>
    <xacro:cylinder_inertia m="0.1" r="0.05" h="0.04"/>
  </link>

  <joint name="laser_joint" type="fixed">
    <parent link="base_link"/>
    <child link="laser"/>
    <origin xyz="0.12 0 0.13" rpy="0 0 0"/>
  </joint>

  <!-- 카메라 -->
  <link name="camera_link">
    <visual>
      <geometry>
        <box size="0.05 0.05 0.05"/>
      </geometry>
      <material name="Blue">
        <color rgba="0.0 0.0 1.0 1.0"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <box size="0.05 0.05 0.05"/>
      </geometry>
    </collision>
    <xacro:box_inertia m="0.1" w="0.05" d="0.05" h="0.05"/>
  </link>

  <joint name="camera_joint" type="fixed">
    <parent link="base_link"/>
    <child link="camera_link"/>
    <origin xyz="0.15 0 0.10" rpy="0 0 0"/>
  </joint>

  <link name="camera_depth_frame"/>
  <joint name="camera_depth_joint" type="fixed">
    <parent link="camera_link"/>
    <child link="camera_depth_frame"/>
    <origin xyz="0 0 0" rpy="-1.5707 0 -1.5707"/>
  </joint>

  <!-- IMU -->
  <link name="imu_link">
    <visual>
      <geometry>
        <box size="0.02 0.02 0.02"/>
      </geometry>
      <material name="Green">
        <color rgba="0 1.0 0 1.0"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <box size="0.02 0.02 0.02"/>
      </geometry>
    </collision>
    <xacro:box_inertia m="0.01" w="0.02" d="0.02" h="0.02"/>
  </link>

  <joint name="imu_joint" type="fixed">
    <parent link="base_link"/>
    <child link="imu_link"/>
    <origin xyz="0 0 0.05" rpy="0 0 0"/>
  </joint>

  <!-- =============================================================
       3. Gazebo 플러그인 및 물리 설정
       ============================================================= -->

  <!-- (3‑1) Gazebo‑ROS State Publisher : TF 트리 브로드캐스트 -->
  <gazebo>
    <plugin name="gazebo_ros_state_publisher"
            filename="libgazebo_ros_state_publisher.so">
      <ros>
        <namespace>/</namespace>
      </ros>
    </plugin>
  </gazebo>

  <!-- (3‑2) 차동 구동 플러그인 -->
  <gazebo>
    <plugin name="differential_drive_controller"
            filename="libgazebo_ros_diff_drive.so">
      <ros>
        <namespace>/</namespace>
        <remapping>cmd_vel:=cmd_vel</remapping>
        <remapping>odom:=odom</remapping>
      </ros>

      <left_joint>drivewhl_l_joint</left_joint>
      <right_joint>drivewhl_r_joint</right_joint>

      <wheel_separation>0.36</wheel_separation>
      <wheel_diameter>0.2</wheel_diameter>

      <max_wheel_torque>200</max_wheel_torque>
      <max_wheel_acceleration>10.0</max_wheel_acceleration>

      <odometry_frame>odom</odometry_frame>
      <robot_base_frame>base_footprint</robot_base_frame>

      <publish_odom>true</publish_odom>
      <publish_odom_tf>true</publish_odom_tf>

      <!-- TF 중복 방지: wheel TF는 robot_state_publisher가 담당 -->
      <publish_wheel_tf>false</publish_wheel_tf>

      <odometry_topic>odom</odometry_topic>
      <odometry_source>world</odometry_source>

      <update_rate>30</update_rate>
    </plugin>
  </gazebo>

  <!-- (3‑3) 레이저 센서 -->
  <gazebo reference="laser">
    <material>Gazebo/FlatBlack</material>
    <sensor name="lds_lfcd_sensor" type="ray">
      <pose>0 0 0 0 0 0</pose>
      <visualize>true</visualize>
      <update_rate>5</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>360</samples>
            <resolution>1</resolution>
            <min_angle>-3.141592654</min_angle>
            <max_angle>3.141592654</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.10</min>
          <max>30.0</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin name="gazebo_ros_lds_lfcd_controller"
              filename="libgazebo_ros_ray_sensor.so">
        <ros>
          <remapping>~/out:=scan</remapping>
        </ros>
        <output_type>sensor_msgs/LaserScan</output_type>
      </plugin>
    </sensor>
  </gazebo>

  <!-- (3‑4) 카메라 센서 -->
  <gazebo reference="camera_link">
    <material>Gazebo/Blue</material>
    <sensor name="d455_camera" type="depth">
      <update_rate>30.0</update_rate>
      <camera>
        <horizontal_fov>1.518436</horizontal_fov>
        <vertical_fov>1.012291</vertical_fov>
        <image>
          <width>1280</width>
          <height>720</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.4</near>
          <far>6.0</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin name="camera_driver" filename="libgazebo_ros_camera.so">
        <ros>
          <remapping>~/image_raw:=camera/image_raw</remapping>
          <remapping>~/image_depth:=camera/depth/image_raw</remapping>
          <remapping>~/camera_info:=camera/camera_info</remapping>
          <remapping>~/camera_info_depth:=camera/depth/camera_info</remapping>
          <remapping>~/points:=camera/depth/points</remapping>
        </ros>
        <camera_name>d455_camera</camera_name>
        <frame_name>camera_depth_frame</frame_name>
        <hack_baseline>0.07</hack_baseline>
      </plugin>
    </sensor>
  </gazebo>

  <!-- (3‑5) IMU -->
  <gazebo reference="imu_link">
    <sensor name="imu_sensor" type="imu">
      <always_on>true</always_on>
      <update_rate>100</update_rate>
      <visualize>true</visualize>
      <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
        <ros>
          <remapping>~/out:=imu</remapping>
        </ros>
        <initial_orientation_as_reference>false</initial_orientation_as_reference>
      </plugin>
      <imu>
        <!-- noise parameters 그대로 유지 -->
        <angular_velocity>
          <x><noise type="gaussian"><mean>0.0</mean><stddev>2e-4</stddev><bias_mean>0.0000075</bias_mean><bias_stddev>0.0000008</bias_stddev></noise></x>
          <y><noise type="gaussian"><mean>0.0</mean><stddev>2e-4</stddev><bias_mean>0.0000075</bias_mean><bias_stddev>0.0000008</bias_stddev></noise></y>
          <z><noise type="gaussian"><mean>0.0</mean><stddev>2e-4</stddev><bias_mean>0.0000075</bias_mean><bias_stddev>0.0000008</bias_stddev></noise></z>
        </angular_velocity>
        <linear_acceleration>
          <x><noise type="gaussian"><mean>0.0</mean><stddev>1.7e-2</stddev><bias_mean>0.1</bias_mean><bias_stddev>0.001</bias_stddev></noise></x>
          <y><noise type="gaussian"><mean>0.0</mean><stddev>1.7e-2</stddev><bias_mean>0.1</bias_mean><bias_stddev>0.001</bias_stddev></noise></y>
          <z><noise type="gaussian"><mean>0.0</mean><stddev>1.7e-2</stddev><bias_mean>0.1</bias_mean><bias_stddev>0.001</bias_stddev></noise></z>
        </linear_acceleration>
      </imu>
    </sensor>
  </gazebo>

</robot>

